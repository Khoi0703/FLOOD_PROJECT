import streamlit as st
from streamlit_folium import st_folium
from utils.map_utils import create_map
from utils.geojson_utils import load_geojson
import pandas as pd
import json
import os
from assets.weather_assets import vietnam_geojson, province_coordinates, weather_forecasts

st.title("üìç B·∫£n ƒë·ªì d·ª± b√°o th·ªùi ti·∫øt Vi·ªát Nam")

# Load d·ªØ li·ªáu ƒë·ªãa gi·ªõi h√†nh ch√≠nh Vi·ªát Nam
geojson_data = vietnam_geojson()
province_coords = province_coordinates(geojson_data)
weather_data = weather_forecasts(province_coords)

RAIN_THRESHOLD = 100  # mm trong 5 ng√†y

# T·∫°o b·∫£n ƒë·ªì
if geojson_data and weather_data:
    map_object = create_map(geojson_data, weather_data, rain_threshold=RAIN_THRESHOLD)
    st_data = st_folium(map_object, width=700, height=500)

    # C·∫£nh b√°o l∆∞·ª£ng m∆∞a cao
    high_rain_provinces = [
        province for province, data in weather_data.items()
        if data.get("total_rain", 0) > RAIN_THRESHOLD
    ]
    if high_rain_provinces:
        st.warning("‚ö†Ô∏è **C·∫£nh b√°o c√°c khu v·ª±c c√≥ l∆∞·ª£ng m∆∞a cao:**")
        for province in high_rain_provinces:
            st.markdown(f"- **{province}**: {weather_data[province]['total_rain']} mm")
    else:
        st.success("‚úÖ Kh√¥ng c√≥ khu v·ª±c n√†o v∆∞·ª£t ng∆∞·ª°ng l∆∞·ª£ng m∆∞a cao.")

    # X·ª≠ l√Ω ch·ªçn t·ªânh/th√†nh ph·ªë t·ª´ b·∫£n ƒë·ªì ho·∫∑c selectbox
    province_list = [f["properties"]["ten_tinh"] for f in geojson_data["features"]]
    if "selected_province" not in st.session_state:
        st.session_state.selected_province = None

    if st_data and st_data.get("last_active_drawing"):
        properties = st_data["last_active_drawing"]["properties"]
        province_name = properties.get("ten_tinh")
        if province_name in province_list:
            st.session_state.selected_province = province_name

    selected_province = st.selectbox(
        "üîç Ch·ªçn t·ªânh/th√†nh ph·ªë:",
        province_list,
        index=province_list.index(st.session_state.selected_province) if st.session_state.selected_province in province_list else 0
    )
    if selected_province != st.session_state.selected_province:
        st.session_state.selected_province = selected_province

    # Hi·ªÉn th·ªã d·ª± b√°o chi ti·∫øt khi nh·∫•n n√∫t
    if st.button("üì° Xem d·ª± b√°o th·ªùi ti·∫øt"):
        province_weather = weather_data.get(st.session_state.selected_province)
        if province_weather and "forecast" in province_weather:
            forecast = province_weather["forecast"]
            # ƒê·∫£m b·∫£o forecast l√† DataFrame
            if not isinstance(forecast, pd.DataFrame):
                try:
                    forecast = pd.DataFrame(forecast)
                except Exception:
                    st.error("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu d·ª± b√°o sang DataFrame.")
                    forecast = None
            if forecast is not None:
                with st.expander(f"üìç D·ª± b√°o th·ªùi ti·∫øt t·∫°i {st.session_state.selected_province}", expanded=True):
                    st.subheader("üìÖ **D·ª± b√°o th·ªùi ti·∫øt 5 ng√†y**")
                    st.dataframe(forecast)
                    st.markdown(f"### üåßÔ∏è **T·ªïng l∆∞·ª£ng m∆∞a trong 5 ng√†y**: `{province_weather['total_rain']} mm`")
                    st.info("‚ÑπÔ∏è D·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c l·∫•y t·ª´ cache ƒë·ªÉ t·ªëi ∆∞u h√≥a.")
        else:
            st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt cho t·ªânh/th√†nh ph·ªë n√†y!")

    # H√†m l∆∞u d·ªØ li·ªáu th·ªùi ti·∫øt ra CSV
    def save_weather_data_to_csv(weather_data, csv_file):
        data = []
        for province, info in weather_data.items():
            forecast = info.get("forecast")
            if forecast is not None:
                # ƒê·∫£m b·∫£o forecast l√† DataFrame
                if not isinstance(forecast, pd.DataFrame):
                    try:
                        forecast = pd.DataFrame(forecast)
                    except Exception:
                        continue
                for _, row in forecast.iterrows():
                    data.append({
                        "T·ªânh/Th√†nh ph·ªë": province,
                        "Ng√†y": row.get("üìÖ Ng√†y", "N/A"),
                        "Nhi·ªát ƒë·ªô trung b√¨nh (¬∞C)": row.get("üå°Ô∏è Nhi·ªát ƒë·ªô trung b√¨nh (¬∞C)", "N/A"),
                        "ƒê·ªô ·∫©m trung b√¨nh (%)": row.get("üíß ƒê·ªô ·∫©m trung b√¨nh (%)", "N/A"),
                        "Gi√≥ trung b√¨nh (m/s)": row.get("üå¨Ô∏è Gi√≥ trung b√¨nh (m/s)", "N/A"),
                        "T·ªïng l∆∞·ª£ng m∆∞a (mm)": row.get("üåßÔ∏è T·ªïng l∆∞·ª£ng m∆∞a (mm)", "N/A")
                    })
        if data:
            df = pd.DataFrame(data)
            df.to_csv(csv_file, index=False, encoding="utf-8-sig")
            st.success(f"D·ªØ li·ªáu th·ªùi ti·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file `{csv_file}`")
        else:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ l∆∞u v√†o CSV.")

    # N√∫t l∆∞u d·ªØ li·ªáu ra CSV
    CSV_FILE = "weather_data.csv"
    if st.button("üíæ L∆∞u to√†n b·ªô d·ªØ li·ªáu th·ªùi ti·∫øt ra CSV"):
        save_weather_data_to_csv(weather_data, CSV_FILE)
else:
    st.error("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì ho·∫∑c d·ª± b√°o th·ªùi ti·∫øt.")
