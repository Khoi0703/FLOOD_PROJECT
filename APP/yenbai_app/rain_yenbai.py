import streamlit as st
import folium
from streamlit_folium import st_folium
import geopandas as gpd
import pandas as pd
from shapely.geometry import Point
import json
import re

# === H√†m ph√¢n lo·∫°i m·ª©c ƒë·ªô c·∫£nh b√°o v√† m√†u ===
def classify_alert(score):
    if score >= 2:
        return "üî¥ N·∫∑ng", "darkred"
    elif score >= 1:
        return "üü† Trung b√¨nh", "orange"
    elif score >= 0.5:
        return "üü° Nh·∫π", "yellow"
    else:
        return "üü¢ D∆∞·ªõi ng∆∞·ª°ng", "lightgreen"

def split_words(name):
    return re.sub(
        r'(?<=[a-z√†√°·∫£√£·∫°ƒÉ√¢ƒë√®√©·∫ª·∫Ω·∫π√™√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥∆°√π√∫·ªß≈©·ª•∆∞])(?=[A-Z√Ä√Å·∫¢√É·∫†ƒÇ√Çƒê√à√â·∫∫·∫º·∫∏√ä√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î∆†√ô√ö·ª¶≈®·ª§∆Ø])',
        ' ', name
    )

# === Load d·ªØ li·ªáu ranh gi·ªõi v√† d·ª± ƒëo√°n ===
gdf = gpd.read_file("yen_bai.geojson")
df = pd.read_csv("yenbai_predictions_clean.csv")

# Load x√£ trong t·ªânh Y√™n B√°i
with open("gadm41_VNM_3.json", encoding="utf-8") as f:
    gadm = json.load(f)
yenbai_xa = [
    feat for feat in gadm["features"]
    if feat["properties"].get("NAME_1", "").lower().replace(" ", "") == "y√™nb√°i"
]
gdf_xa = gpd.GeoDataFrame.from_features(yenbai_xa, crs="EPSG:4326")

# T·ªïng ƒë·ªô ng·∫≠p theo x√£
xa_ngap_dict = {}
for _, row in df.iterrows():
    pt = Point(row["square_center_lon"], row["square_center_lat"])
    for _, xa in gdf_xa.iterrows():
        if xa.geometry.contains(pt):
            name3 = xa["NAME_3"]
            xa_ngap_dict[name3] = xa_ngap_dict.get(name3, 0) + row["pred_flood_score"]

# === Hi·ªÉn th·ªã b·∫£n ƒë·ªì Streamlit ===
st.set_page_config(layout="wide")
st.title("üåä B·∫£n ƒë·ªì d·ª± ƒëo√°n ng·∫≠p t·∫°i Y√™n B√°i")

center = [df["square_center_lat"].mean(), df["square_center_lon"].mean()]
m = folium.Map(location=center, zoom_start=9, tiles="CartoDB positron")

# V·∫Ω ranh gi·ªõi t·ªânh
folium.GeoJson(
    gdf,
    name="Yen Bai",
    style_function=lambda x: {"fillColor": "#00000000", "color": "blue", "weight": 2}
).add_to(m)

# T√¥ m√†u t·ª´ng x√£
for _, row in gdf_xa.iterrows():
    name3 = row["NAME_3"]
    name_fmt = split_words(name3)
    score = xa_ngap_dict.get(name3, 0)
    alert_level, color = classify_alert(score)
    popup_text = f"{name_fmt}<br>ƒê·ªô ng·∫≠p: {score:.1f} ({alert_level})" if score > 0 else name_fmt
    folium.GeoJson(
        row["geometry"],
        name=name_fmt,
        style_function=lambda x, color=color: {
            "fillColor": color,
            "color": "black",
            "weight": 0.5,
            "fillOpacity": 0.7 if color != "#00000000" else 0
        },
        popup=folium.Popup(popup_text, max_width=250)
    ).add_to(m)

st_folium(m, width=800, height=600)

# === B·∫£ng d·ªØ li·ªáu c·∫£nh b√°o x√£ ===
records = []
for name3, total_flood_score in xa_ngap_dict.items():
    geom = gdf_xa[gdf_xa["NAME_3"] == name3].geometry.values[0]
    matching_rows = df[
        df.apply(
            lambda row: Point(row["square_center_lon"], row["square_center_lat"]).within(geom),
            axis=1
        )
    ]

    rain_3d_avg = matching_rows["rainfall_3d"].mean()
    rain_7d_avg = matching_rows["rainfall_7d"].mean()
    rain_1m_avg = matching_rows["rainfall_1m"].mean()
    alert_text, _ = classify_alert(total_flood_score)

    records.append({
        "X√£/Th·ªã tr·∫•n": split_words(name3),
        "‚ö†Ô∏è M·ª©c ƒë·ªô c·∫£nh b√°o": alert_text,
        "T·ªïng ƒë·ªô ng·∫≠p d·ª± ƒëo√°n": round(total_flood_score, 2),
        "M∆∞a TB/ng√†y (3d)": round(rain_3d_avg ,2),
        "M∆∞a TB/ng√†y (7d)": round(rain_7d_avg, 2),
        "M∆∞a TB/ng√†y (1m)": round(rain_1m_avg, 2),
    })

df_alert = pd.DataFrame(records)
df_alert = df_alert.sort_values("T·ªïng ƒë·ªô ng·∫≠p d·ª± ƒëo√°n", ascending=False)
st.subheader("üìã Danh s√°ch x√£/th·ªã tr·∫•n c√≥ nguy c∆° ng·∫≠p")
st.dataframe(df_alert, use_container_width=True)


st.subheader("üåßÔ∏è C·∫£nh b√°o theo l∆∞·ª£ng m∆∞a (t·ªïng 7 ng√†y)")

# T√≠nh t·ªïng l∆∞·ª£ng m∆∞a 7 ng√†y cho t·ª´ng x√£
xa_rain_dict = {}
for _, row in df.iterrows():
    pt = Point(row["square_center_lon"], row["square_center_lat"])
    for _, xa in gdf_xa.iterrows():
        if xa.geometry.contains(pt):
            name3 = xa["NAME_3"]
            xa_rain_dict[name3] = xa_rain_dict.get(name3, 0) + row["rainfall_7d"]

# Ph√¢n lo·∫°i theo l∆∞·ª£ng m∆∞a
def classify_rain(rain):
    if rain >= 50:
        return "üî¥ R·∫•t l·ªõn", "darkred"
    elif rain >= 40:
        return "üü† L·ªõn", "orange"
    elif rain >= 20:
        return "üü° V·ª´a", "yellow"
    else:
        return "üü¢ Nh·ªè", "lightgreen"

# T·∫°o b·∫£n ƒë·ªì m∆∞a
m_rain = folium.Map(location=center, zoom_start=9, tiles="CartoDB positron")
folium.GeoJson(
    gdf,
    name="Yen Bai",
    style_function=lambda x: {"fillColor": "#00000000", "color": "blue", "weight": 2}
).add_to(m_rain)

for _, row in gdf_xa.iterrows():
    name3 = row["NAME_3"]
    name_fmt = split_words(name3)
    rain_sum = xa_rain_dict.get(name3, 0)
    rain_level, color = classify_rain(rain_sum)
    popup_text = f"{name_fmt}<br>L∆∞·ª£ng m∆∞a (7d): {rain_sum:.1f} mm ({rain_level})" if rain_sum > 0 else name_fmt
    folium.GeoJson(
        row["geometry"],
        name=name_fmt,
        style_function=lambda x, color=color: {
            "fillColor": color,
            "color": "black",
            "weight": 0.5,
            "fillOpacity": 0.7 if color != "#00000000" else 0
        },
        popup=folium.Popup(popup_text, max_width=250)
    ).add_to(m_rain)

# T·∫°o b·∫£ng d·ªØ li·ªáu l∆∞·ª£ng m∆∞a
records_rain = []
for name3, rain_total in xa_rain_dict.items():
    records_rain.append({
        "X√£/Th·ªã tr·∫•n": split_words(name3),
        "L∆∞·ª£ng m∆∞a (7 ng√†y, mm)": round(rain_total, 2)
    })
df_rain = pd.DataFrame(records_rain).sort_values("L∆∞·ª£ng m∆∞a (7 ng√†y, mm)", ascending=False)

# Hi·ªÉn th·ªã 2 c·ªôt: b·∫£n ƒë·ªì | b·∫£ng
col1, col2 = st.columns([1, 1])
with col1:
    st_folium(m_rain, width=700, height=600)

with col2:
    st.dataframe(df_rain, use_container_width=True)
